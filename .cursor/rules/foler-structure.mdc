---
description: 
globs: 
alwaysApply: true
---
## 📁 Folder & File Structure Rules for Cursor

### Rule Type: Directory & File Structure

#### 1. Top-level Structure

- The following directories **must** exist under `src/`:
  - `app/` (Next.js app router, routing only)
  - `features/` (domain-driven feature folders)
  - `shared/` (shared UI, layout, utils, config)
  - `assets/` (images, fonts, icons)
  - `styles/` (global CSS variables)
  - `instrumentation.ts` (monitoring/logging)

#### 2. Features Directory Structure

- Each domain under `features/` **must** have:
  - `components/` (domain UI components)
    - Each component in its own folder:  
      `{ComponentName}/`
      - `{ComponentName}.view.tsx` (presentational component, style & structure only, uses Tailwind CSS)
      - `{ComponentName}.tsx` (container with state/logic, only if needed)
      - `{ComponentName}.stories.tsx` (storybook documentation)
  - `api/` (external API request functions, server communication only)
  - `types/` (TypeScript types/interfaces)
  - `hooks/` (custom React hooks: state management, API wrapping, UI connection)
  - `services/` (pure domain functions, core logic, data transformation)
  - `screens/` (full-page components for routing entry)

#### 3. Shared Directory Structure

- `shared/ui/` (reusable UI components, same structure as domain components)
- `shared/layout/` (common layout components)
- `shared/lib/` (utility functions, axios, etc.)
- `shared/config/` (global config/constants)

#### 4. App Directory Structure

- Each route under `app/` **must** have a `page.tsx` (routing & SSR/CSR only)
- Business UI logic **must** be imported from `features/*/screens/`

#### 5. Naming Rules

| File/Folder Name         | Description                                              |
|------------------------- |---------------------------------------------------------|
| `*.view.tsx`             | Pure presentational component (style with Tailwind CSS) |
| `*.tsx`                  | Container component (with state/logic, wraps .view.tsx) |
| `*.stories.tsx`          | Storybook documentation                                 |
| `/screens/`              | Full-page components (routing entry, state + composition)|
| `/api/`                  | API request functions (server communication only)       |
| `/types/`                | TypeScript types/interfaces                             |
| `/hooks/`                | Custom React hooks (state, API wrapping, UI connection) |
| `/services/`             | Pure domain functions, core logic, data transformation  |

#### 6. Styling Guidelines

- **Use Tailwind CSS**: All styling should be done with Tailwind utility classes
- **shadcn/ui components**: Preferred for complex UI components (Button, Card, Input, etc.)
- **Custom CSS**: Only when Tailwind utilities are insufficient (animations, complex gradients)
- **Global styles**: Only in `styles/globals.css` for CSS variables and base styles
- **Responsive design**: Use Tailwind's responsive prefixes (sm:, md:, lg:, xl:, 2xl:)

#### 7. Additional Settings

- **No unnecessary folder depth**: Prefer meaningful, shallow structure over deep nesting.
- **Consistent naming**: All files and folders must use camelCase or PascalCase as appropriate.
- **No logic in app/page.tsx**: Only routing/SSR/CSR logic allowed.
- **Unit conventions**:  
  - Font/line-height: Tailwind text utilities  
  - Padding/margin/gap: Tailwind spacing utilities
  - Width/height: Tailwind sizing utilities
  - Colors: Tailwind color palette or CSS variables
  - Responsive values: Tailwind responsive prefixes
  - Animations: Tailwind animate utilities or custom CSS

#### 8. Example Structure

```plaintext
src/
├── app/
│   └── edu/
│       └── page.tsx
├── features/
│   └── user/
│       ├── components/
│       │   └── UserProfileCard/
│       │       ├── UserProfileCard.view.tsx (with Tailwind classes)
│       │       ├── UserProfileCard.tsx
│       │       └── UserProfileCard.stories.tsx
│       ├── api/
│       ├── types/
│       ├── hooks/
│       ├── services/
│       └── screens/
│           └── UserProfileScreen.tsx
├── shared/
│   ├── ui/ (shadcn/ui components)
│   ├── layout/
│   ├── lib/
│   └── config/
├── assets/
├── styles/
│   └── globals.css
└── instrumentation.ts
```

---

### Rule Type: Lint/Validation
- **Warn** if any business logic is found in `app/{route}/page.tsx`.
- **Warn** if a component with state/logic does not have a `.tsx` container.
- **Warn** if presentational components contain state or side effects.
- **Warn** if any folder/file does not follow the naming conventions above.
- **Warn** if any domain folder is missing one of: `api/`, `types/`, `hooks/`, `services/`, `components/`, `screens/`.
- **Warn** if CSS modules (`.module.css`) are used instead of Tailwind CSS.
